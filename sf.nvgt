#pragma plugin nvgt_curl
#include"bgt_compat.nvgt"
#include "instance.nvgt"
#include"sound_pool.nvgt"
#include"includes/audioutils.nvgt"
#include"includes/blockage.nvgt"
#include"includes/bodyfall.nvgt"
#include"includes/bomb_classes.nvgt"
#include"includes/calander.nvgt"
#include"includes/checkpoint.nvgt"
#include"includes/clock.nvgt"
#include"includes/conveyor_belt.nvgt"
#include"includes/dialog.nvgt"
#include"includes/door_classes.nvgt"
#include"includes/downloader.nvgt"
#include"includes/elapsed.nvgt"
#include"includes/extrafuncts.nvgt"
#include"includes/fighter.nvgt"
#include"includes/floor_breaker.nvgt"
#include"includes/forcefield.nvgt"
#include"includes/form.nvgt";
#include"includes/hazard.nvgt"
#include"includes/healzone.nvgt"
#include"includes/itemfuncts.nvgt"
#include"includes/keyfuncts.nvgt"
#include"includes/lift.nvgt"
#include"includes/m_pro.nvgt"
#include"includes/map.nvgt"
#include"includes/menu.nvgt"
#include"includes/mine.nvgt"
#include"includes/moving_hazard.nvgt"
#include"includes/moving_platform.nvgt"
#include"includes/musicambience.nvgt"
#include"includes/musicsource.nvgt"
#include"includes/npc_classes.nvgt"
#include"includes/parse_classes.nvgt"
#include"includes/platform.nvgt"
#include"includes/prepgame.nvgt"
#include"includes/reverb_handler.nvgt"
#include"includes/savedata.nvgt"
#include"includes/setupmenu.nvgt"
#include"includes/sign.nvgt"
#include"includes/slider.nvgt"
#include"includes/soundambience.nvgt"
#include"includes/soundsource.nvgt"
#include"includes/spawnpoint.nvgt"
#include"includes/speech.nvgt"
#include"includes/spier.nvgt"
#include"includes/spike.nvgt"
#include"includes/staircase.nvgt"
#include"includes/teleporter.nvgt"
#include"includes/text square.nvgt"
#include"includes/text_input.nvgt"
#include"includes/timedmusic.nvgt"
#include"includes/timedsource.nvgt"
#include"includes/timedtext.nvgt"
#include"includes/token_gen.nvgt"
#include"includes/travelpoint.nvgt"
#include"includes/vanishing_platform.nvgt"
#include"includes/vehicle.nvgt"
#include"includes/virtual_dialogs.nvgt"
#include"includes/weapons.nvgt"
#include"includes/wall.nvgt"
#include"includes/zone.nvgt"
bool hrtf=true;
bool y_is_elevation=true;
int progslot, quest, mres;
int dockmode=1, echomode=1, fademode=1, keytime=200, spacehold=1;
int mreset=0, mskipnum=1, up_down=1, left_right=0, home_end=0, wrap=0, repeat_items=0, numbers=0, first_letter=0, position_info=0, side_scroll=0;
string chartype="default";
string keyboardtheme="keyboard";
string menutype="default";
string soundcard="Default";
string soundpack="default";
string[] dock, dock2, dock3;
string changesplit, credsplit, redsplit;
string mapdata;
string mapname;
string mapname2;
string loc;
string newloc;
string newzone;
string version;
bool atapex, ascending, building, dlt, dmd, dmt, falling, fb, itm, itms, jb, lp, lpg, mb, mb2, sse, tbl, tbl2, trg;
bool bouncing=true, charhit=true, cammable=true, camsz=false, drawable=true, droppable=true, fireable=true, healable=true, hidedocks=false, hidegames=false, hidemaps=false, hidesets=false, is_in_wall=false, jumpable=true, melee=true, mfc=false, moveable=true, quittable=true, scadder=false, spawnable=true, spiable=true, sittable=true, sitting=false, speedable=true, telable=true, turnable=true, useitems=false;
double x, paxx, y, paxy, x2, pax2, y2, paxy2, minhp, direction, direction2, card, damage, height, firetime, launchtime, lv, ln, pitch, pitch2, speedtime, speedtime2, volume, volume2, volset, xn;
double autovolume=0, automaxvolume=120, autopan=0, automaxpan=100, autopitch=100, automaxpitch=200;
double cameravolume=0, cameramaxvolume=120, camerapan=0, cameramaxpan=100, camerapitch=200, cameramaxpitch=200;
double carvolume=0, carmaxvolume=120, carpan=0, carmaxpan=100, carpitch=100, carmaxpitch=200;
double doorvolume=0, doormaxvolume=120, doorpan=0, doormaxpan=100, doorpitch=100, doormaxpitch=200;
double fallvolume=0, fallmaxvolume=120, fallpan=0, fallmaxpan=100, fallpitch=100, fallmaxpitch=200;
double itemvolume=0, itemmaxvolume=120, itempan=0, itemmaxpan=100, itempitch=100, itemmaxpitch=200;
double painvolume=0, painmaxvolume=120, painpan=0, painmaxpan=100, painpitch=100, painmaxpitch=200;
double shieldvolume=0, shieldmaxvolume=120, shieldpan=0, shieldmaxpan=100, shieldpitch=100, shieldmaxpitch=200;
double tilevolume=0, tilemaxvolume=120, tilepan=0, tilemaxpan=100, tilepitch=100, tilemaxpitch=200;
double wallvolume=0, wallmaxvolume=120, wallpan=0, wallmaxpan=100, wallpitch=100, wallmaxpitch=200;
double weaponvolume=0, weaponmaxvolume=120, weaponpan=0, weaponmaxpan=100, weaponpitch=100, weaponmaxpitch=200;
double attack=0, ammo=100, defence=0, health=100, kills=0, points=0, xp=0, xpmod=1, xprequiered=1, level=1, levmod=1, lifecard=1, loadedammo=100, shieldstrength=100, shielddefence=0, shieldlevel, maxammo=100, maxhealth=100, maxshieldstrength=100, maxx=100, maxy=100, weplevel=1;
float revdry, revwet, revsize, revdamp, revwidth;
int autoslot, camslot, fallslot, heartslot, invslot, itemslot, painslot, prevslot, shieldloop, shieldslot, shieldremoveslot, shieldwearslot, tileslot, wallslot, weaponslot;
int amrange, amrange2, amrange3, amrange4, emrange, emrange2, emrange3, emrange4, robrange, robrange2, robrange3, robrange4, telrange, telrange2, zombrange, zombrange2, zombrange3, zombrange4, charmode, fallcounter, gamemode, jumping, gametime, healthmode, musmode, movetime, platmode, sorcemode, ty1, ty2;
int charcamsound=1, charcamsound2=1, chardeathsound=1, charfallsound=1, charfallsound2=1, charhurtsound=1, charhealsound=1, charhealsound2=1, charhealsound3=1, charinvsound=1, charjumpsound=1, charjumpsound2=1, charkillsound=1, charlandsound=1, charlevsound=1, charlifesound=1, charshakesound=1, charsitsound=1, charstandsound=1, charswingsound=1, charturnsound=1;
int shieldbreaksound=1, shielddrawsound=1, shieldhitsound=1, shieldloopsound=1, shieldremovesound=1, shieldwearsound=1;
int wepdrawsound=1, wepemptysound=1, wepfiresound=1, wephitsound=1, weploopsound=1, weprecsound=1, wepreloadsound=1, wepshellsound=1;
int firesound=1, jumpsound=1, hitsound=1, rocksound=1, heartsound=1, sitsound=1, spydist=101, standsound=1, switchsound=1, togglesound=1, turnsound=1, telsound=1, tilesound=1, wallsound=1;
int spokenswitch=1, spokentoggle=1, spokenturns=0, spokentel=0, spokenvalues=1;
int aninum=1, autojump=1, autosave=0, bullmode=0, cameramode=1, eninum=1, hearttype=4, jumpheight=5, keyrowhold=1, locspeech=3, modspeed=5, objinf=1, objnum=1, paused=0, pausem=1, projnum=1, robnum=1, wepdamage=1, weprange=1, weprange2=1, wepspeed=50, wepweight=1, zombnum=1, zonestatus=1;
int hprestoration=0, healthspeech=3, sprestoration=0, itemcad=3, item1delay=50, item2delay=100, item3delay=200, itemhold=1, shieldon=0, shieldweight=1, shieldspeech=3, wephold=0;
int fallspeed=120;
int deffallspeed=120;
int airtime=125, apextime=80, amsptime=500, camtime=100, effectstime=100, emsptime=500, falltime=250, hprestoretime=2200, hearttime=1000, itemtime1=50, itemtime2=100, itemtime3=200, jumptime=120, jumptime2=80, objsptime=500, prosptime=500, robsptime=500, runtime=500, sprestoretime=2200, stuntime=500, usetime=100, walktime=1000, weapontime=100, weapontime2=100, zombsptime=500;
key_hold cleft(KEY_LEFT,200,modspeed);
key_hold cright(KEY_RIGHT,200,modspeed);
key_hold cup(KEY_UP,200,modspeed);
key_hold cdown(KEY_DOWN,200,modspeed);
string amtype;
string belttyp;
string botype;
string bosstyp;
string bosstyp2;
string bosstyp3;
string checktyp;
string clostyp;
string calandertyp;
string clocktyp;
string desttyp;
string dlgtyp;
string emtype;
string floortyp;
string forcetyp;
string healtyp;
string lifttyp;
string looptyp;
string mplattyp;
string minetyp;
string movtyp;
string mustyp;
string opentyp;
string potype;
string rotype;
string signtyp;
string sorcetyp;
string timbotype;
string tutype;
string tutype2;
string tutype3;
string vplattyp;
string vehtyp;
string zotype;
string hazztype;
string itemtype;
string itemtype2;
string spiktype;
string teltype;
string hidstatus;
string hidstatus2;
string hidstatus3;
string hidstatus4;
string name;
string password;
string drpassword;
string pspassword;
string reverid;
string tiletype;
string txt;
string txt2;
string walltype;
string weapontype="melee";
string weapontype2="fist";
string camdir="left";
string facing="left";
string drinktype="boddle of water";
string foodtype="apple";
string healtype="health drug";
string shieldtype="none";
timer airtimer, amsptimer, camtimer, effectstimer, emsptimer, falltimer, hprestoretimer, hearttimer, gametimer, itemtimer1, itemtimer2, itemtimer3, jumptimer, movetimer, objsptimer, prosptimer, robsptimer, runtimer, sprestoretimer, stuntimer, usetimer, walktimer, weapontimer, weapontimer2, zombsptimer;
file docks, docks2, docks3, dockfile, info, logfile, mapper, ver;
character@ current_char=null;
shield@ current_shield=null;
weapon@ current_weapon=null;
timer keytimer;
audio_form f, f2, form, form2;
dynamic_menu_pro m, m2, menu, menu2;
instance gamstence("sf");
kh k, k2, keyhook, keyhook2;
savedata sd("data/saves/game.dat", "s7NGuz4iSPGvdCy52bDekJezFp23WcBoeMdlY8Mk9d7Zj51dD8LiDqhYN6bveBODZS1Yt6m1pMOBdRi9e8DLmPBPRPLlW2xFA1rjNdJAugeNL7v6Fcnl1F7rp1hdjSCwYzw34cOtL");
savedata st("data/saves/options.dat","mBlAGtFL8GUjFZDAaLkG6Zqv1KHKOimA3SGqT6wmdJWc5h6RdSB97916D9SIQfZMjdCZMSJmDByZHYuS2V22QCvHmSGMHIOSwIyHjD46zmjGcm3bgZRyImIAVLivGTgAHub0jpjORA2t3z1GJMcHu0VxMIbJrmSzXjU9wdgeZYdP8z7MVym8SBrGrb2X8r9ryXY03MhwzMgjdD6jo9q");
slider s, s2, slide, slide2;
sound dummy, dummy2, mus, mus2;
sound_pool animalpool, beltpool, bombpool, bosspool, breakerpool, bulletpool, calpool, campool, clockpool, checkpool, doorpool, enemiepool, forcepool, hazardpool, healpool, itempool, liftpool, minepool, muspool, platpool, passagepool, projpool, robpool, rockpool, signpool, sourcepool, spikepool, telpool, turpool, vehpool, vanpool, zombpool, p, p2, t, t2, mpool, mpool2, pool, pool2, spool, spool2, temp, temp2;
text_input v, v2, text, text2, input, input2;
time_elapsed timeelapsed;
vector cam, cam2, me, me2;
bool directory_empty(const string&in dir)
{
if (!directory_exists(dir))
{
return false;
}
string[] files=find_files(dir+"/*");
string[] folders=find_directories(dir+"/*");
return files.length()==0 and folders.length()==0;
}
uint64 get_directory_size(const string&in dir)
{
uint64 result=0;
string[]@ subdirs = find_directories(dir + "/*");
for (uint i = 0; i < subdirs.length(); i++)
{
result += get_directory_size(dir + "/" + subdirs[i]);
}
string[]@ files = find_files(dir + "/*");
for (uint i = 0; i < files.length(); i++)
{
result += file_get_size(dir + "/" + files[i]);
}
return result;
}
void main()
{
keyhook.install();
dummy.load("dummy");
sound_global_hrtf=true;
timeelapsed.set_timer(gametimer);
initialize_reverb_pools();
initialize_sound_pools();
getver();
set_sound_storage("data/saves/misc.dat");
set_sound_decryption_key("yLnhpXN6@VL=DP&o*7O#Uz)tNHR?!tJUaQ4RP9MO%=ZjL9B",true);
show_game_window("Simple fighter, version "+version);
if(gamstence.is_already_running)
{
alert("error", "You can only have one instence of this game running!");
exit();
}
else
{
string[] charlist=find_directories("data/layouts/characters/*");
for(uint i=0; i<charlist.length(); i++)
{
charparse(charlist[i]);
}
string[] arclist=find_directories("data/layouts/equipments/weapons/archery/*");
for(uint i=0; i<arclist.length(); i++)
{
arcparse(arclist[i]);
}
string[] artlist=find_directories("data/layouts/equipments/weapons/artillery/*");
for(uint i=0; i<artlist.length(); i++)
{
artparse(artlist[i]);
}
string[] exolist=find_directories("data/layouts/equipments/weapons/explosive/*");
for(uint i=0; i<exolist.length(); i++)
{
exoparse(exolist[i]);
}
string[] melelist=find_directories("data/layouts/equipments/weapons/melee/*");
for(uint i=0; i<melelist.length(); i++)
{
meleparse(melelist[i]);
}
string[] shieldlist=find_directories("data/layouts/equipments/shields/*");
for(uint i=0; i<shieldlist.length(); i++)
{
shieldparse(shieldlist[i]);
}
@current_char=get_default_char();
shieldtype=current_char.shieldtype;
shieldweight=current_char.shieldweight;
attack=current_char.attack;
defence=current_char.defence;
points=current_char.points;
health=current_char.health;
maxhealth=current_char.maxhealth;
lifecard=current_char.lifecard;
level=current_char.level;
levmod=current_char.levmod;
xp=current_char.xp;
xpmod=current_char.xpmod;
xprequiered=current_char.xprequiered;
charcamsound=current_char.charcamsound;
charcamsound2=current_char.charcamsound2;
chardeathsound=current_char.chardeathsound;
charfallsound=current_char.charfallsound;
charfallsound2=current_char.charfallsound2;
charhurtsound=current_char.charhurtsound;
charhealsound=current_char.charhealsound;
charhealsound2=current_char.charhealsound2;
charhealsound3=current_char.charhealsound3;
charinvsound=current_char.charinvsound;
charjumpsound=current_char.charjumpsound;
charjumpsound2=current_char.charjumpsound2;
charkillsound=current_char.charkillsound;
charlandsound=current_char.charlandsound;
charlevsound=current_char.charlevsound;
charlifesound=current_char.charlifesound;
charshakesound=current_char.charshakesound;
charsitsound=current_char.charsitsound;
charstandsound=current_char.charstandsound;
charswingsound=current_char.charswingsound;
charturnsound=current_char.charturnsound;
@current_shield=get_default_shield();
shielddefence=current_shield.shielddefence;
shieldweight=current_shield.shieldweight;
shieldstrength=current_shield.shieldstrength;
maxshieldstrength=current_shield.maxshieldstrength;
shieldlevel=current_shield.shieldlevel;
shieldbreaksound=current_shield.shieldbreaksound;
shielddrawsound=current_shield.shielddrawsound;
shieldhitsound=current_shield.shieldhitsound;
shieldloopsound=current_shield.shieldloopsound;
shieldremovesound=current_shield.shieldremovesound;
shieldwearsound=current_shield.shieldwearsound;
@current_weapon=get_default_weapon();
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
readdata();
readpreffs();
if(directory_exists("data/sounds") and !directory_empty("data/sounds"))
{
mainmenu();
}
else
{
downloadsounds();
}
}
}
void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}
void fade_multi_pool(int fade_mode)
{
sound_pool@[] pools = {p, animalpool, bombpool, bosspool, breakerpool, bulletpool, enemiepool, healpool, liftpool, passagepool, platpool, projpool, robpool, rockpool, telpool, turpool, zombpool, campool, calpool, clockpool, checkpool, forcepool, hazardpool, beltpool, doorpool, minepool, muspool, signpool, sourcepool, spikepool, vanpool, vehpool};    
if(fade_mode==0)
{
fade_pitch_pool(pools);
}
if(fade_mode==1)
{
fade_volume_pool(pools);
}
}
void fade_pitch_pool(sound_pool@[] handles, double time=20, double minpitch=20, double amount=2)
{
bool all_faded = false;    
while(!all_faded)
{
all_faded = true;
for(uint h=0; h<handles.length(); h++)
{
for(uint i=0; i<handles[h].items.length(); i++)
{
if(@handles[h].items[i].handle!=null && handles[h].items[i].handle.playing)
{
double current_pitch = handles[h].items[i].handle.pitch;
if(current_pitch > minpitch)
{
double new_pitch = current_pitch - amount;
if(new_pitch < minpitch)
new_pitch = minpitch;
handles[h].items[i].handle.pitch = new_pitch;
all_faded = false;
}
}
}
}
wait(time);
}    
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void fade_volume_pool(sound_pool@[] handles, double time=0.25, double minvol=-50)
{
for(double current=0; current>minvol; current-=time)
{
for(uint h=0; h<handles.length(); h++)
{
for(uint x=0; x<handles[h].items.length(); x++)
{
if(@handles[h].items[x].handle==null)
continue;
if(handles[h].items[x].handle.playing==false)
continue;
handles[h].items[x].handle.volume = handles[h].items[x].handle.volume-time;
}
}
wait(5);
}
for(uint h=0; h<handles.length(); h++)
{
handles[h].destroy_all();
}
}
void getver()
{
ver.open("docks/version.txt","rb");
version=ver.read();
ver.close();
}
void initialize_sound_pools()
{
@p.mixer=mixer();
p.max_distance=0;
p.pan_step=2.5;
p.volume_step=2.5;
@animalpool.mixer=mixer();
animalpool.max_distance=0;
animalpool.pan_step=2.5;
animalpool.volume_step=2.5;
@bombpool.mixer=mixer();
bombpool.max_distance=0;
bombpool.pan_step=2.5;
bombpool.volume_step=2.5;
@bosspool.mixer=mixer();
bosspool.max_distance=0;
bosspool.pan_step=2.5;
bosspool.volume_step=2.5;
@breakerpool.mixer=mixer();
breakerpool.max_distance=0;
breakerpool.pan_step=2.5;
breakerpool.volume_step=2.5;
@bulletpool.mixer=mixer();
bulletpool.max_distance=0;
bulletpool.pan_step=2.5;
bulletpool.volume_step=2.5;
@enemiepool.mixer=mixer();
enemiepool.max_distance=0;
enemiepool.pan_step=2.5;
enemiepool.volume_step=2.5;
@healpool.mixer=mixer();
healpool.max_distance=0;
healpool.pan_step=2.5;
healpool.volume_step=2.5;
@liftpool.mixer=mixer();
liftpool.max_distance=0;
liftpool.pan_step=2.5;
liftpool.volume_step=2.5;
@passagepool.mixer=mixer();
passagepool.max_distance=0;
passagepool.pan_step=2.5;
passagepool.volume_step=2.5;
@platpool.mixer=mixer();
platpool.max_distance=0;
platpool.pan_step=2.5;
platpool.volume_step=2.5;
@projpool.mixer=mixer();
projpool.max_distance=0;
projpool.pan_step=2.5;
projpool.volume_step=2.5;
@robpool.mixer=mixer();
robpool.max_distance=0;
robpool.pan_step=2.5;
robpool.volume_step=2.5;
@rockpool.mixer=mixer();
rockpool.max_distance=0;
rockpool.pan_step=2.5;
rockpool.volume_step=2.5;
@telpool.mixer=mixer();
telpool.max_distance=0;
telpool.pan_step=2.5;
telpool.volume_step=2.5;
@turpool.mixer=mixer();
turpool.max_distance=0;
turpool.pan_step=2.5;
turpool.volume_step=2.5;
@zombpool.mixer=mixer();
zombpool.max_distance=0;
zombpool.pan_step=2.5;
zombpool.volume_step=2.5;
@campool.mixer=mixer();
campool.max_distance=0;
campool.pan_step=2.5;
campool.volume_step=2.5;
@calpool.mixer=mixer();
calpool.max_distance=0;
calpool.pan_step=2.5;
calpool.volume_step=2.5;
@clockpool.mixer=mixer();
clockpool.max_distance=0;
clockpool.pan_step=2.5;
clockpool.volume_step=2.5;
@checkpool.mixer=mixer();
checkpool.max_distance=0;
checkpool.pan_step=2.5;
checkpool.volume_step=2.5;
@forcepool.mixer=mixer();
forcepool.max_distance=0;
forcepool.pan_step=2.5;
forcepool.volume_step=2.5;
@hazardpool.mixer=mixer();
hazardpool.max_distance=0;
hazardpool.pan_step=2.5;
hazardpool.volume_step=2.5;
@itempool.mixer=mixer();
itempool.max_distance=0;
itempool.pan_step=2.5;
itempool.volume_step=2.5;
@beltpool.mixer=mixer();
beltpool.max_distance=0;
beltpool.pan_step=2.5;
beltpool.volume_step=2.5;
@doorpool.mixer=mixer();
doorpool.max_distance=0;
doorpool.pan_step=2.5;
doorpool.volume_step=2.5;
@minepool.mixer=mixer();
minepool.max_distance=0;
minepool.pan_step=2.5;
minepool.volume_step=2.5;
@muspool.mixer=mixer();
muspool.max_distance=0;
muspool.pan_step=2.5;
muspool.volume_step=2.5;
@signpool.mixer=mixer();
signpool.max_distance=0;
signpool.pan_step=2.5;
signpool.volume_step=2.5;
@sourcepool.mixer=mixer();
sourcepool.max_distance=0;
sourcepool.pan_step=2.5;
sourcepool.volume_step=2.5;
@spikepool.mixer=mixer();
spikepool.max_distance=0;
spikepool.pan_step=2.5;
spikepool.volume_step=2.5;
@vehpool.mixer=mixer();
vehpool.max_distance=0;
vehpool.pan_step=2.5;
vehpool.volume_step=2.5;
@vanpool.mixer=mixer();
vanpool.max_distance=0;
vanpool.pan_step=2.5;
vanpool.volume_step=2.5;
}
void update_sound_pools()
{
p.update_listener_2d(me.x,me.y);
animalpool.update_listener_2d(me.x,me.y);
bombpool.update_listener_2d(me.x,me.y);
bosspool.update_listener_2d(me.x,me.y);
breakerpool.update_listener_2d(me.x,me.y);
bulletpool.update_listener_2d(me.x,me.y);
enemiepool.update_listener_2d(me.x,me.y);
healpool.update_listener_2d(me.x,me.y);
liftpool.update_listener_2d(me.x,me.y);
passagepool.update_listener_2d(me.x,me.y);
platpool.update_listener_2d(me.x,me.y);
projpool.update_listener_2d(me.x,me.y);
robpool.update_listener_2d(me.x,me.y);
rockpool.update_listener_2d(me.x,me.y);
telpool.update_listener_2d(me.x,me.y);
turpool.update_listener_2d(me.x,me.y);
zombpool.update_listener_2d(me.x,me.y);
campool.update_listener_2d(me.x,me.y);
calpool.update_listener_2d(me.x,me.y);
clockpool.update_listener_2d(me.x,me.y);
checkpool.update_listener_2d(me.x,me.y);
forcepool.update_listener_2d(me.x,me.y);
hazardpool.update_listener_2d(me.x,me.y);
itempool.update_listener_2d(me.x,me.y);
beltpool.update_listener_2d(me.x,me.y);
doorpool.update_listener_2d(me.x,me.y);
minepool.update_listener_2d(me.x,me.y);
muspool.update_listener_2d(me.x,me.y);
signpool.update_listener_2d(me.x,me.y);
sourcepool.update_listener_2d(me.x,me.y);
spikepool.update_listener_2d(me.x,me.y);
vanpool.update_listener_2d(me.x,me.y);
vehpool.update_listener_2d(me.x,me.y);
}
void pause_pools()
{
sound_pool@[] pools = {animalpool, bombpool, bosspool, breakerpool, bulletpool, enemiepool, healpool, liftpool, passagepool, platpool, projpool, robpool, rockpool, telpool, turpool, zombpool, calpool, clockpool, checkpool, forcepool, hazardpool, beltpool, doorpool, minepool, muspool, signpool, sourcepool, spikepool, vanpool, vehpool};    
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            if(@pools[h].items[i].handle == null)
                continue;
            if(pools[h].items[i].handle.playing == false)
                continue;
            pools[h].pause_sound(i);
        }
    }
}
void resume_pools()
{
sound_pool@[] pools = {animalpool, bombpool, bosspool, breakerpool, bulletpool, enemiepool, healpool, liftpool, passagepool, platpool, projpool, robpool, rockpool, telpool, turpool, zombpool, calpool, clockpool, checkpool, forcepool, hazardpool, beltpool, doorpool, minepool, muspool, signpool, sourcepool, spikepool, vanpool, vehpool};   
    for(uint h = 0; h < pools.length(); h++)
    {
        for(uint i = 0; i < pools[h].items.length(); i++)
        {
            pools[h].resume_sound(i);
        }
    }
}
void pause_game()
{
paused=1;
pause_pools();
cammable=false;
droppable=false;
fireable=false;
gametimer.pause();
healable=false;
jumpable=false;
moveable=false;
quittable=false;
speedable=false;
spawnable=false;
sittable=false;
telable=false;
turnable=false;
}
void resume_game()
{
paused=0;
resume_pools();
cammable=true;
droppable=true;
fireable=true;
gametimer.resume();
healable=true;
jumpable=true;
moveable=true;
quittable=true;
speedable=true;
spawnable=true;
sittable=true;
telable=true;
turnable=true;
}
void resetgame()
{
aninum=1;
eninum=1;
projnum=1;
robnum=1;
zombnum=1;
weapontype="melee";
me.x=0;
me.y=0;
maxx=100;
maxy=100;
kills=0;
facing="left";
tiletype="short grass";
walltype="wallgrass";
}
void resetpreffs()
{
chartype="default";
keyboardtheme="keyboard";
soundpack="default";
soundcard="Default";
sound_output_device=1;
menutype="default";
autosave=0;
hidedocks=false;
hidegames=false;
hidemaps=false;
hidesets=false;
hrtf=false;
mreset=0;
mskipnum=1;
up_down=1;
left_right=0;
home_end=0;
wrap=0;
repeat_items=0;
numbers=0;
first_letter=0;
position_info=0;
side_scroll=0;
}
void restart()
{
if(SCRIPT_COMPILED)
{
bool success=run("sf.exe","",false,false);
if(!success)
{
alert("error", "Unable to restart sf.exe!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe","sf.nvgt",false,false);
if(!success)
{
alert("error", "Unable to restart sf.nvgt!");
}
}
}
